<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mvvm.Core</name>
    </assembly>
    <members>
        <member name="T:Mvvm.Core.NoValidationAttribute">
            <summary>
            Excludes a property from the validation in the <see cref="T:Mvvm.Core.ValidationViewModel"/>.
            </summary>
        </member>
        <member name="T:Mvvm.Core.BaseCommand">
            <summary>
            Base command class that implements <see cref="T:Mvvm.Core.ICommandInvokeCanExecuteChangedEvent"/>.
            </summary>
        </member>
        <member name="E:Mvvm.Core.BaseCommand.CanExecuteChanged">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.BaseCommand.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.BaseCommand.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.BaseCommand.Mvvm#Core#ICommandInvokeCanExecuteChangedEvent#RaiseCanExecuteChanged">
            <inheritdoc/>
        </member>
        <member name="T:Mvvm.Core.EventCommand">
            <summary>
            Implementation of an <see cref="T:Mvvm.Core.IEventCommand"/>.
            </summary>
        </member>
        <member name="E:Mvvm.Core.EventCommand.OnCanExecute">
            <inheritdoc/>
        </member>
        <member name="E:Mvvm.Core.EventCommand.OnExecute">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.EventCommand.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.EventCommand.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Mvvm.Core.EventCommand`1">
            <summary>
            Implementation of an <see cref="T:Mvvm.Core.IEventCommand"/>.
            </summary>
            <typeparam name="T">Expected parameter type.</typeparam>
        </member>
        <member name="E:Mvvm.Core.EventCommand`1.OnCanExecute">
            <inheritdoc/>
        </member>
        <member name="E:Mvvm.Core.EventCommand`1.OnExecute">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.EventCommand`1.CanExecute(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.EventCommand`1.Execute(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Mvvm.Core.ICommandInvokeCanExecuteChangedEvent">
            <summary>
            Interface to raise <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="M:Mvvm.Core.ICommandInvokeCanExecuteChangedEvent.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="T:Mvvm.Core.IEventCommand">
            <summary>
            Declaration of an non parameter event command.
            </summary>
        </member>
        <member name="E:Mvvm.Core.IEventCommand.OnCanExecute">
            <summary>
            EventHandler to determine can execute changed state.
            </summary>
        </member>
        <member name="E:Mvvm.Core.IEventCommand.OnExecute">
            <summary>
            EventHandler to Execute the command.
            </summary>
        </member>
        <member name="T:Mvvm.Core.IEventCommand`1">
            <summary>
            Declaration of an non parameter event command.
            </summary>
            <typeparam name="T">Expected parameter type.</typeparam>
        </member>
        <member name="E:Mvvm.Core.IEventCommand`1.OnCanExecute">
            <summary>
            EventHandler to determine can execute changed state.
            </summary>
        </member>
        <member name="E:Mvvm.Core.IEventCommand`1.OnExecute">
            <summary>
            EventHandler to Execute the command.
            </summary>
        </member>
        <member name="T:Mvvm.Core.IParameterCommand`1">
            <summary>
            Definition of an command with a required parameter.
            </summary>
            <typeparam name="T">Type of the parameter that is required.</typeparam>
        </member>
        <member name="M:Mvvm.Core.IParameterCommand`1.CanExecute(`0)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter"> Data used by the command.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:Mvvm.Core.IParameterCommand`1.Execute(`0)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.</param>
        </member>
        <member name="T:Mvvm.Core.ParameterCommand`1">
            <summary>
            Base command class that provides type conversation.
            Signature of <see cref="T:Mvvm.Core.IParameterCommand`1"/> implemented.
            </summary>
            <typeparam name="T">Type of the expected command parameter.</typeparam>
        </member>
        <member name="M:Mvvm.Core.ParameterCommand`1.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.ParameterCommand`1.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.ParameterCommand`1.Mvvm#Core#IParameterCommand{T}#CanExecute(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.ParameterCommand`1.Mvvm#Core#IParameterCommand{T}#Execute(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.ParameterCommand`1.CanExecute(`0)">
            <summary>
            Elevates if the command can be executed (<see cref="M:Mvvm.Core.ParameterCommand`1.CanExecute(System.Object)"/>).
            </summary>
            <param name="parameter">Converted parameter.</param>
            <returns>True if command is able to run.</returns>
        </member>
        <member name="M:Mvvm.Core.ParameterCommand`1.Execute(`0)">
            <summary>
            Runs the command (<see cref="M:Mvvm.Core.ParameterCommand`1.Execute(System.Object)"/>).
            </summary>
            <param name="parameter">Converted parameter.</param>
        </member>
        <member name="T:Mvvm.Core.RelayCommand">
            <summary>
            Relay command to implement command behavior.
            </summary>
        </member>
        <member name="M:Mvvm.Core.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Mvvm.Core.RelayCommand"/> class.
            </summary>
            <param name="onExecute">Handler for execute command.</param>
            <param name="onCanExecute">Handler to validate whether execution is possible.</param>
        </member>
        <member name="M:Mvvm.Core.RelayCommand.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.RelayCommand.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Mvvm.Core.RelayCommand`1">
            <summary>
            Relay command to implement command behavior.
            </summary>
            <typeparam name="T">Type of expected parameter.</typeparam>
        </member>
        <member name="M:Mvvm.Core.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Mvvm.Core.RelayCommand`1"/> class.
            </summary>
            <param name="onExecute">Handler for execute command.</param>
            <param name="onCanExecute">Handler to validate whether execution is possible.</param>
        </member>
        <member name="M:Mvvm.Core.RelayCommand`1.CanExecute(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.RelayCommand`1.Execute(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Mvvm.Core.ViewModelCommandListener">
            <summary>
            Observer class to monitor a properties of a view model and
            fire <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> if depend property changed.
            </summary>
        </member>
        <member name="M:Mvvm.Core.ViewModelCommandListener.#ctor(System.ComponentModel.INotifyPropertyChanged,Mvvm.Core.ICommandInvokeCanExecuteChangedEvent,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Mvvm.Core.ViewModelCommandListener"/> class.
            </summary>
            <param name="target">Target view model to observe.</param>
            <param name="command">Command to raise <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/>.</param>
            <param name="dependencies">Collection of dependencies to monitor.</param>
        </member>
        <member name="T:Mvvm.Core.ViewModelPropertyListener">
            <summary>
            Observer class to monitor properties of a view model and
            fire <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> if depend property changed.
            </summary>
        </member>
        <member name="M:Mvvm.Core.ViewModelPropertyListener.#ctor(System.ComponentModel.INotifyPropertyChanged,Mvvm.Core.IViewModel,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Mvvm.Core.ViewModelPropertyListener"/> class.
            </summary>
            <param name="target">Target view model to observe.</param>
            <param name="viewModel">View model to notify.</param>
            <param name="propertyName">Property name to call <see cref="M:Mvvm.Core.IViewModel.InvokeOnPropertyChanged(System.String)"/> with.</param>
            <param name="dependencies">Collection of dependencies to monitor.</param>
        </member>
        <member name="T:Mvvm.Core.AdvancedPropertyChangedEventArgs">
            <summary>
            Extends <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> by <see cref="P:Mvvm.Core.AdvancedPropertyChangedEventArgs.Before"/> and <see cref="P:Mvvm.Core.AdvancedPropertyChangedEventArgs.After"/> properties.
            </summary>
        </member>
        <member name="M:Mvvm.Core.AdvancedPropertyChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvvm.Core.AdvancedPropertyChangedEventArgs"/> class.
            </summary>
            <param name="propertyName">Name of the property that was changed.</param>
            <param name="before">The old value.</param>
            <param name="after">The new value.</param>
        </member>
        <member name="P:Mvvm.Core.AdvancedPropertyChangedEventArgs.Before">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="P:Mvvm.Core.AdvancedPropertyChangedEventArgs.After">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="T:Mvvm.Core.CanExecuteEventArgs">
            <summary>
            Event arguments for <see cref="T:Mvvm.Core.IEventCommand"/> CanExecute handler.
            </summary>
        </member>
        <member name="P:Mvvm.Core.CanExecuteEventArgs.CanExecute">
            <summary>
            Gets or sets a value indicating whether the event can be executed of not.
            Default is true.
            </summary>
        </member>
        <member name="T:Mvvm.Core.CanExecuteEventArgs`1">
            <summary>
            Event arguments for <see cref="T:Mvvm.Core.IEventCommand"/> CanExecute handler.
            </summary>
            <typeparam name="T">The type of the command parameter.</typeparam>
        </member>
        <member name="M:Mvvm.Core.CanExecuteEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvvm.Core.CanExecuteEventArgs`1"/> class.
            </summary>
            <param name="parameter">The parameter of the event arguments.</param>
        </member>
        <member name="P:Mvvm.Core.CanExecuteEventArgs`1.CanExecute">
            <summary>
            Gets or sets a value indicating whether the event can be executed of not.
            Default is true.
            </summary>
        </member>
        <member name="P:Mvvm.Core.CanExecuteEventArgs`1.Parameter">
            <summary>
            Gets the command parameter.
            </summary>
        </member>
        <member name="T:Mvvm.Core.CommandExtensions">
            <summary>
            Extension class to extend <see cref="T:System.Windows.Input.ICommand"/> (<see cref="T:Mvvm.Core.ICommandInvokeCanExecuteChangedEvent"/>).
            </summary>
        </member>
        <member name="M:Mvvm.Core.CommandExtensions.RegisterPropertyDependency``1(``0,System.ComponentModel.INotifyPropertyChanged,System.String[])">
             <summary>
             Creates an event listener to monitor depend properties.
             Raises <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event, if property was changed.
             </summary>
             <typeparam name="T">Type of the command.</typeparam>
             <param name="command">The Command to notify.</param>
             <param name="viewModel">The view model that contains the properties.</param>
             <param name="dependencies">Collection of property names the command depends on.</param>
             <returns>The command itself.</returns>
             <example>
             public class MyViewModel : IViewModel
             {
                 public int Property { get; set; }
                 public ICommand MyCommand { get; }
            
                 MyViewModel()
                 {
                     MyCommand = new RelayCommand(doSomething, () => Property == 0)
                         .RegisterPropertyDependency(this, nameof(Property));
                 }
             }
             ...
             </example>
        </member>
        <member name="T:Mvvm.Core.IViewModelExtensions">
            <summary>
            Extension class to extend <see cref="T:Mvvm.Core.IViewModel"/> (<see cref="T:System.ComponentModel.INotifyPropertyChanged"/>).
            </summary>
        </member>
        <member name="M:Mvvm.Core.IViewModelExtensions.RegisterDependencies``1(``0,Mvvm.Core.IViewModel,System.String,System.String[])">
             <summary>
             Raises <see cref="M:Mvvm.Core.IViewModel.InvokeOnPropertyChanged(System.String)"/> if a dependent property was changed.
             </summary>
             <typeparam name="T">Type of the Property.</typeparam>
             <param name="viewModel">The view model the monitored property belongs to.</param>
             <param name="mainViewModel">The view model to notify.</param>
             <param name="mainPropertyName">The name that get fired, if a dependency was changed.</param>
             <param name="dependencies">The dependencies are properties of the view model.</param>
             <returns>The monitored view model for chaining.</returns>
             public class MyViewModel : IViewModel
             {
                 public int Property => MySubViewModel.Property1 + MySubViewModel.Property2;
                 public IViewModel MySubViewModel { get; }
            
                 MyViewModel(IViewModel subViewModel)
                 {
                     MySubViewModel = subViewModel.RegisterDependencies(this, nameof(Property), "Property1", "Property2"));
                 }
             }
        </member>
        <member name="T:Mvvm.Core.BaseViewModel">
            <summary>
            The base view model.
            </summary>
        </member>
        <member name="E:Mvvm.Core.BaseViewModel.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="E:Mvvm.Core.BaseViewModel.AdvancedPropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Mvvm.Core.BaseViewModel.Mvvm#Core#IViewModel#InvokeOnPropertyChanged(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.BaseViewModel.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            This call raises the <see cref="E:Mvvm.Core.BaseViewModel.AdvancedPropertyChanged"/> and <see cref="E:Mvvm.Core.BaseViewModel.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the property that get changed.</param>
            <param name="before">Old value of the property.</param>
            <param name="after">New value of the property.</param>
        </member>
        <member name="M:Mvvm.Core.BaseViewModel.SetPropertyValue``1(``0@,``0,System.String)">
            <summary>
            Compares the new and the old value.
            If values are different, the <see cref="M:Mvvm.Core.BaseViewModel.OnPropertyChanged(System.String,System.Object,System.Object)"/> method will be called.
            The return value is always the new property.
            </summary>
            <typeparam name="T">Type of the Property.</typeparam>
            <param name="property">The reference to the current value.</param>
            <param name="newValue">The value from the setter.</param>
            <param name="propertyName">The name of the property that was changed.</param>
            <example>
            private int _property;
            public int Property
            {
                get => _property;
                set => this.SetPropertyValue(ref _property, value);
            }
            ...
            </example>
        </member>
        <member name="T:Mvvm.Core.IViewModel">
            <summary>
            Declaration of an view model.
            </summary>
        </member>
        <member name="M:Mvvm.Core.IViewModel.InvokeOnPropertyChanged(System.String)">
            <summary>
            To invoke the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the property that was changed.</param>
        </member>
        <member name="T:Mvvm.Core.ValidationViewModel">
            <summary>
            Implements <see cref="T:System.ComponentModel.IDataErrorInfo"/> to the view model.
            </summary>
        </member>
        <member name="P:Mvvm.Core.ValidationViewModel.Error">
            <inheritdoc/>
        </member>
        <member name="P:Mvvm.Core.ValidationViewModel.ValidateOnPropertyChanged">
            <summary>
            Gets or sets a value indicating whether properties gets validated on <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:Mvvm.Core.ValidationViewModel.PropertyNames">
            <summary>
            Gets the names of all public properties.
            </summary>
        </member>
        <member name="P:Mvvm.Core.ValidationViewModel.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.ValidationViewModel.Validate">
            <summary>
            This method will validate all public properties.
            </summary>
            <returns>True if any error.</returns>
        </member>
        <member name="M:Mvvm.Core.ValidationViewModel.ValidateProperty(System.String)">
            <summary>
            Validates a single property.
            <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> annotations will be validated by default.
            </summary>
            <param name="propertyName">The property to validate.</param>
            <returns>string.Empty if valid.</returns>
        </member>
        <member name="T:Mvvm.Core.ValidationViewModel_neu">
            <summary>
            Implements <see cref="T:System.ComponentModel.IDataErrorInfo"/> to the view model.
            </summary>
        </member>
        <member name="E:Mvvm.Core.ValidationViewModel_neu.ErrorsChanged">
            <inheritdoc/>
        </member>
        <member name="P:Mvvm.Core.ValidationViewModel_neu.HasErrors">
            <inheritdoc/>
        </member>
        <member name="P:Mvvm.Core.ValidationViewModel_neu.ValidateOnPropertyChanged">
            <summary>
            Gets or sets a value indicating whether properties gets validated on <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:Mvvm.Core.ValidationViewModel_neu.PropertyNames">
            <summary>
            Gets the names of all public properties.
            </summary>
        </member>
        <member name="M:Mvvm.Core.ValidationViewModel_neu.Validate">
            <summary>
            This method will validate all public properties.
            </summary>
            <returns>True if any error.</returns>
        </member>
        <member name="M:Mvvm.Core.ValidationViewModel_neu.System#ComponentModel#INotifyDataErrorInfo#GetErrors(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mvvm.Core.ValidationViewModel_neu.GetErrors(System.String)">
            <summary>
            Validates the property and returns the error as string.
            </summary>
            <param name="propertyName">Property to validate.</param>
            <returns>All errors of this property as string.</returns>
        </member>
        <member name="M:Mvvm.Core.ValidationViewModel_neu.ValidateChangedProperty(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Checks for errors for the changed property.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SIM.Mvvm</name>
    </assembly>
    <members>
        <member name="T:SIM.Mvvm.CodeGeneration.AutoMapPropertiesAttribute">
            <summary>
            This attribute is used to mark model fields or properties to auto generate properties that points to the field.
            The attribute is only valid if you are using the <see cref="N:SIM.Mvvm.CodeGeneration"/> project.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.CodeGeneration.AutoMapPropertiesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SIM.Mvvm.CodeGeneration.AutoMapPropertiesAttribute"/> class.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.CodeGeneration.AutoMapPropertiesAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SIM.Mvvm.CodeGeneration.AutoMapPropertiesAttribute"/> class.
            </summary>
            <param name="excludedPropertyNames">Collection of property names that are excluded from source generation.</param>
        </member>
        <member name="T:SIM.Mvvm.DependsOnAttribute">
            <summary>
            Attribute definition to mark dependencies of properties or commands to view model properties.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.DependsOnAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SIM.Mvvm.DependsOnAttribute"/> class.
            </summary>
            <param name="propertyName">Name of the property the target depends on.</param>
            <param name="propertyNames">Additional property names.</param>
        </member>
        <member name="P:SIM.Mvvm.DependsOnAttribute.PropertyNames">
            <summary>
            Gets the property names the target depends on.
            </summary>
        </member>
        <member name="T:SIM.Mvvm.Command">
            <summary>
            Base command class that implements <see cref="T:SIM.Mvvm.ICommandInvokeCanExecuteChangedEvent"/>.
            </summary>
        </member>
        <member name="E:SIM.Mvvm.Command.CanExecuteChanged">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.Command.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.Command.System#Windows#Input#ICommand#Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.Command.SIM#Mvvm#ICommandInvokeCanExecuteChangedEvent#InvokeCanExecuteChanged(System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.Command.Execute">
            <summary>
            Execute to run this command.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.Command.CanExecute">
            <summary>
            Call to check if the command can be executed.
            </summary>
            <returns>True if context is valid.</returns>
        </member>
        <member name="M:SIM.Mvvm.Command.OnExecute">
            <summary>
            The execution context.
            The <see cref="M:SIM.Mvvm.Command.CanExecute"/> call was already checked.
            </summary>
        </member>
        <member name="T:SIM.Mvvm.ParameterCommand`1">
            <summary>
            Base command class that provides type conversation.
            Signature of <see cref="T:SIM.Mvvm.IParameterCommand`1"/> implemented.
            </summary>
            <typeparam name="T">Type of the expected command parameter.</typeparam>
        </member>
        <member name="E:SIM.Mvvm.ParameterCommand`1.CanExecuteChanged">
            <inheritdoc/>
        </member>
        <member name="P:SIM.Mvvm.ParameterCommand`1.AllowDefault">
            <summary>
            Gets or sets a value indicating whether <see cref="!:default(T)"/> is a valid value.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.ParameterCommand`1.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.ParameterCommand`1.System#Windows#Input#ICommand#Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.ParameterCommand`1.SIM#Mvvm#ICommandInvokeCanExecuteChangedEvent#InvokeCanExecuteChanged(System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.ParameterCommand`1.Execute(`0)">
            <summary>
            Execute to run this command.
            </summary>
            <param name="parameter">The parameter to execute.</param>
        </member>
        <member name="M:SIM.Mvvm.ParameterCommand`1.CanExecute(`0)">
            <summary>
            Elevates if the command can be executed (<see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>).
            </summary>
            <param name="parameter">Converted parameter.</param>
            <returns>True if command is able to run.</returns>
        </member>
        <member name="M:SIM.Mvvm.ParameterCommand`1.OnExecute(`0)">
            <summary>
            Runs the command (<see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>).
            </summary>
            <param name="parameter">Converted parameter.</param>
        </member>
        <member name="T:SIM.Mvvm.AsyncRelayCommand">
            <summary>
            Relay command to implement asynchron command behavior.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.AsyncRelayCommand.#ctor(SIM.Mvvm.IAsyncExecutionContext,SIM.Mvvm.AsyncCommandExecutionHandler,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:SIM.Mvvm.AsyncRelayCommand"/> class.
            </summary>
            <param name="context">Synchronization context to run into.</param>
            <param name="onExecute">Asynchron handler for execute command.</param>
            <param name="onCanExecute">Handler to validate whether execution is possible.</param>
        </member>
        <member name="P:SIM.Mvvm.AsyncRelayCommand.ExceptionHandler">
            <summary>
            Gets or sets a handler for exceptions that occurs in <see cref="M:SIM.Mvvm.AsyncRelayCommand.ExecuteAsync"/> method.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.AsyncRelayCommand.ExecuteAsync">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            If the command does not require data to be passed, this object can be set to null.
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:SIM.Mvvm.AsyncRelayCommand.CanExecute">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.AsyncRelayCommand.OnExecute">
            <inheritdoc/>
        </member>
        <member name="T:SIM.Mvvm.AsyncRelayCommand`1">
            <summary>
            Relay command to implement asynchron command behavior.
            </summary>
            <typeparam name="T">The expected type of the command parameter.</typeparam>
        </member>
        <member name="M:SIM.Mvvm.AsyncRelayCommand`1.#ctor(SIM.Mvvm.IAsyncExecutionContext,SIM.Mvvm.AsyncCommandExecutionHandler{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:SIM.Mvvm.AsyncRelayCommand`1"/> class.
            </summary>
            <param name="context">Synchronization context to run into.</param>
            <param name="onExecute">Asynchron handler for execute command.</param>
            <param name="onCanExecute">Handler to validate whether execution is possible.</param>
        </member>
        <member name="P:SIM.Mvvm.AsyncRelayCommand`1.ExceptionHandler">
            <summary>
            Gets or sets a handler for exceptions that occurs in <see cref="!:onExecute"/> method.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.AsyncRelayCommand`1.ExecuteAsync(`0)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.
            If the command does not require data to be passed, this object can be set to null.</param>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:SIM.Mvvm.AsyncRelayCommand`1.CanExecute(`0)">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.AsyncRelayCommand`1.OnExecute(`0)">
            <inheritdoc/>
        </member>
        <member name="T:SIM.Mvvm.EventCommand">
            <summary>
            Implementation of an <see cref="T:SIM.Mvvm.IEventCommand"/>.
            </summary>
        </member>
        <member name="E:SIM.Mvvm.EventCommand.OnCanExecuted">
            <inheritdoc/>
        </member>
        <member name="E:SIM.Mvvm.EventCommand.OnExecuted">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.EventCommand.CanExecute">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.EventCommand.OnExecute">
            <inheritdoc/>
        </member>
        <member name="T:SIM.Mvvm.EventCommand`1">
            <summary>
            Implementation of an <see cref="T:SIM.Mvvm.IEventCommand"/>.
            </summary>
            <typeparam name="T">Expected parameter type.</typeparam>
        </member>
        <member name="E:SIM.Mvvm.EventCommand`1.OnCanExecuted">
            <inheritdoc/>
        </member>
        <member name="E:SIM.Mvvm.EventCommand`1.OnExecuted">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.EventCommand`1.CanExecute(`0)">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.EventCommand`1.OnExecute(`0)">
            <inheritdoc/>
        </member>
        <member name="T:SIM.Mvvm.RelayCommand">
            <summary>
            Relay command to implement command behavior.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:SIM.Mvvm.RelayCommand"/> class.
            </summary>
            <param name="onExecute">Handler for execute command.</param>
            <param name="onCanExecute">Handler to validate whether execution is possible.</param>
        </member>
        <member name="M:SIM.Mvvm.RelayCommand.CanExecute">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.RelayCommand.OnExecute">
            <inheritdoc/>
        </member>
        <member name="T:SIM.Mvvm.RelayCommand`1">
            <summary>
            Relay command to implement command behavior.
            </summary>
            <typeparam name="T">Type of expected parameter.</typeparam>
        </member>
        <member name="M:SIM.Mvvm.RelayCommand`1.#ctor(SIM.Mvvm.CommandExecuteHandler{`0},SIM.Mvvm.CommandCanExecuteHandler{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SIM.Mvvm.RelayCommand`1"/> class.
            </summary>
            <param name="onExecute">Handler for execute command.</param>
            <param name="onCanExecute">Handler to validate whether execution is possible.</param>
        </member>
        <member name="M:SIM.Mvvm.RelayCommand`1.CanExecute(`0)">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.RelayCommand`1.OnExecute(`0)">
            <inheritdoc/>
        </member>
        <member name="T:SIM.Mvvm.ViewModelCommandListener">
            <summary>
            Observer class to monitor a properties of a view model and
            fire <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> if depend property changed.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.ViewModelCommandListener.#ctor(System.ComponentModel.INotifyPropertyChanged,SIM.Mvvm.ICommandInvokeCanExecuteChangedEvent,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SIM.Mvvm.ViewModelCommandListener"/> class.
            </summary>
            <param name="target">Target view model to observe.</param>
            <param name="command">Command to raise <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/>.</param>
            <param name="dependencies">Collection of dependencies to monitor.</param>
        </member>
        <member name="M:SIM.Mvvm.ViewModelCommandListener.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.ViewModelCommandListener.BelongsTo(System.ComponentModel.INotifyPropertyChanged,SIM.Mvvm.ICommandInvokeCanExecuteChangedEvent)">
            <summary>
            Checks if current listener belongs to the view model and the command.
            </summary>
            <param name="viewModel">the view model to check.</param>
            <param name="command">The command to check.</param>
            <returns>True if view model and command matches.</returns>
        </member>
        <member name="T:SIM.Mvvm.ViewModelCommandMonitor">
            <summary>
            Observer class to monitor a command of an view model.
            Will register <see cref="M:SIM.Mvvm.CommandExtensions.RegisterPropertyDependency``1(``0,System.ComponentModel.INotifyPropertyChanged,System.String[])"/>
            on any change of the command.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.ViewModelCommandMonitor.#ctor(SIM.Mvvm.IViewModel,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SIM.Mvvm.ViewModelCommandMonitor"/> class.
            </summary>
            <param name="target">Target view model to observe.</param>
            <param name="commandName">Name of the command to monitor.</param>
            <param name="dependencies">Collection of dependencies to monitor.</param>
        </member>
        <member name="T:SIM.Mvvm.ViewModelPropertyListener">
            <summary>
            Observer class to monitor properties of a view model and
            fire <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> if depend property changed.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.ViewModelPropertyListener.#ctor(System.ComponentModel.INotifyPropertyChanged,SIM.Mvvm.IViewModel,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SIM.Mvvm.ViewModelPropertyListener"/> class.
            </summary>
            <param name="target">Target view model to observe.</param>
            <param name="viewModel">View model to notify.</param>
            <param name="propertyName">Property name to call <see cref="M:SIM.Mvvm.IViewModel.InvokeOnPropertyChanged(System.String)"/> with.</param>
            <param name="dependencies">Collection of dependencies to monitor.</param>
        </member>
        <member name="T:SIM.Mvvm.AdvancedPropertyChangedEventArgs">
            <summary>
            Extends <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> by <see cref="P:SIM.Mvvm.AdvancedPropertyChangedEventArgs.Before"/> and <see cref="P:SIM.Mvvm.AdvancedPropertyChangedEventArgs.After"/> properties.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.AdvancedPropertyChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SIM.Mvvm.AdvancedPropertyChangedEventArgs"/> class.
            </summary>
            <param name="propertyName">Name of the property that was changed.</param>
            <param name="before">The old value.</param>
            <param name="after">The new value.</param>
        </member>
        <member name="P:SIM.Mvvm.AdvancedPropertyChangedEventArgs.Before">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="P:SIM.Mvvm.AdvancedPropertyChangedEventArgs.After">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="T:SIM.Mvvm.CanExecuteEventArgs">
            <summary>
            Event arguments for <see cref="T:SIM.Mvvm.IEventCommand"/> CanExecute handler.
            </summary>
        </member>
        <member name="P:SIM.Mvvm.CanExecuteEventArgs.CanExecute">
            <summary>
            Gets or sets a value indicating whether the event can be executed of not.
            Default is true.
            </summary>
        </member>
        <member name="T:SIM.Mvvm.CanExecuteEventArgs`1">
            <summary>
            Event arguments for <see cref="T:SIM.Mvvm.IEventCommand"/> CanExecute handler.
            </summary>
            <typeparam name="T">The type of the command parameter.</typeparam>
        </member>
        <member name="M:SIM.Mvvm.CanExecuteEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SIM.Mvvm.CanExecuteEventArgs`1"/> class.
            </summary>
            <param name="parameter">The parameter of the event arguments.</param>
        </member>
        <member name="P:SIM.Mvvm.CanExecuteEventArgs`1.CanExecute">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            Default is true.
            </summary>
        </member>
        <member name="P:SIM.Mvvm.CanExecuteEventArgs`1.Parameter">
            <summary>
            Gets the command parameter.
            </summary>
        </member>
        <member name="T:SIM.Mvvm.CommandExtensions">
            <summary>
            Extension class to extend <see cref="T:System.Windows.Input.ICommand"/> (<see cref="T:SIM.Mvvm.ICommandInvokeCanExecuteChangedEvent"/>).
            </summary>
        </member>
        <member name="M:SIM.Mvvm.CommandExtensions.RegisterPropertyDependency``1(``0,System.ComponentModel.INotifyPropertyChanged,System.String[])">
             <summary>
             Creates an event listener to monitor depend properties.
             Raises <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event, if property was changed.
             </summary>
             <typeparam name="T">Type of the command.</typeparam>
             <param name="command">The Command to notify.</param>
             <param name="viewModel">The view model that contains the properties.</param>
             <param name="dependencies">Collection of property names the command depends on.</param>
             <returns>The command itself.</returns>
             <example>
             public class MyViewModel : IViewModel
             {
                 public int Property { get; set; }
                 public ICommand MyCommand { get; }
            
                 MyViewModel()
                 {
                     MyCommand = new RelayCommand(doSomething, () => Property == 0)
                         .RegisterPropertyDependency(this, nameof(Property));
                 }
             }
             ...
             </example>
        </member>
        <member name="M:SIM.Mvvm.CommandExtensions.UnregisterPropertyDependency(SIM.Mvvm.ICommandInvokeCanExecuteChangedEvent,System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Unregisters the command listener.
            </summary>
            <param name="command">The command to release the monitor.</param>
            <param name="viewModel">The view model the command belongs tó.</param>
        </member>
        <member name="M:SIM.Mvvm.CommandExtensions.TryInvokeCanExecuteChanged(System.Windows.Input.ICommand)">
            <summary>
            Tries to invoke the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event.
            </summary>
            <param name="command">The command that has changed.</param>
        </member>
        <member name="T:SIM.Mvvm.IViewModelExtensions">
            <summary>
            Extension class to extend <see cref="T:SIM.Mvvm.IViewModel"/> (<see cref="T:System.ComponentModel.INotifyPropertyChanged"/>).
            </summary>
        </member>
        <member name="M:SIM.Mvvm.IViewModelExtensions.RegisterDependencies``1(``0,SIM.Mvvm.IViewModel,System.String,System.String[])">
             <summary>
             Raises <see cref="M:SIM.Mvvm.IViewModel.InvokeOnPropertyChanged(System.String)"/> if a dependent property was changed.
             </summary>
             <typeparam name="T">Type of the Property.</typeparam>
             <param name="viewModel">The view model the monitored property belongs to.</param>
             <param name="mainViewModel">The view model to notify.</param>
             <param name="mainPropertyName">The name that get fired, if a dependency was changed.</param>
             <param name="dependencies">The dependencies are properties of the view model.</param>
             public class MyViewModel : IViewModel
             {
                 public int Property => MySubViewModel.Property1 + MySubViewModel.Property2;
                 public IViewModel MySubViewModel { get; }
            
                 MyViewModel(IViewModel subViewModel)
                 {
                     MySubViewModel = subViewModel.RegisterDependencies(this, nameof(Property), "Property1", "Property2"));
                 }
             }
        </member>
        <member name="T:SIM.Mvvm.ICommandInvokeCanExecuteChangedEvent">
            <summary>
            Interface to raise <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.ICommandInvokeCanExecuteChangedEvent.InvokeCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event.
            </summary>
            <param name="sender">Sender of the event, must be the command itself.</param>
            <param name="args">EventArgs to submit.</param>
        </member>
        <member name="T:SIM.Mvvm.IEventCommand">
            <summary>
            Declaration of an non parameter event command.
            </summary>
        </member>
        <member name="E:SIM.Mvvm.IEventCommand.OnCanExecuted">
            <summary>
            EventHandler to determine can execute changed state.
            </summary>
        </member>
        <member name="E:SIM.Mvvm.IEventCommand.OnExecuted">
            <summary>
            EventHandler to Execute the command.
            </summary>
        </member>
        <member name="T:SIM.Mvvm.IEventCommand`1">
            <summary>
            Declaration of an non parameter event command.
            </summary>
            <typeparam name="T">Expected parameter type.</typeparam>
        </member>
        <member name="E:SIM.Mvvm.IEventCommand`1.OnCanExecuted">
            <summary>
            EventHandler to determine can execute changed state.
            </summary>
        </member>
        <member name="E:SIM.Mvvm.IEventCommand`1.OnExecuted">
            <summary>
            EventHandler to Execute the command.
            </summary>
        </member>
        <member name="T:SIM.Mvvm.IParameterCommand`1">
            <summary>
            Definition of an command with a required parameter.
            </summary>
            <typeparam name="T">Type of the parameter that is required.</typeparam>
        </member>
        <member name="T:SIM.Mvvm.CommandExecuteHandler`1">
            <summary>
            Defines an execution handler of a <see cref="T:SIM.Mvvm.RelayCommand`1"/>.
            </summary>
            <typeparam name="T">Type of the expected parameter.</typeparam>
            <param name="parameter">The parameter of the command.</param>
        </member>
        <member name="T:SIM.Mvvm.CommandCanExecuteHandler`1">
            <summary>
            Defines an can execute handler of a <see cref="T:SIM.Mvvm.RelayCommand`1"/>.
            </summary>
            <typeparam name="T">Type of the expected parameter.</typeparam>
            <param name="parameter">The parameter of the command.</param>
            <returns>True if the command can be executed.</returns>
        </member>
        <member name="T:SIM.Mvvm.AsyncCommandExecutionHandler">
            <summary>
            Defines an execution handler of an <see cref="T:SIM.Mvvm.AsyncRelayCommand"/>.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>The asynchronous task.</returns>
        </member>
        <member name="T:SIM.Mvvm.AsyncCommandExecutionHandler`1">
            <summary>
            Defines an execution handler of an <see cref="T:SIM.Mvvm.AsyncRelayCommand`1"/>.
            </summary>
            <typeparam name="T">Type of the expected parameter.</typeparam>
            <param name="parameter">The parameter of the command.</param>
            <param name="token">The cancellation token.</param>
            <returns>The asynchronous task.</returns>
        </member>
        <member name="T:SIM.Mvvm.IExceptionHandler">
            <summary>
            Declaration of an execution handler.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.IExceptionHandler.HandleException(System.Exception)">
            <summary>
            Handles an Exception.
            </summary>
            <param name="ex">Exception to handle.</param>
            <returns>If exception could not be handled and should be re thrown.</returns>
        </member>
        <member name="T:SIM.Mvvm.IAsyncExecutionContext">
            <summary>
            Declaration of an asynchron execution context.
            </summary>
        </member>
        <member name="P:SIM.Mvvm.IAsyncExecutionContext.IsBusy">
            <summary>
            Gets a value indicating whether the execution context is busy.
            </summary>
        </member>
        <member name="P:SIM.Mvvm.IAsyncExecutionContext.Cancel">
            <summary>
            Gets the command to cancel the current running command.
            </summary>
        </member>
        <member name="P:SIM.Mvvm.IAsyncExecutionContext.CancellationTokenSource">
            <summary>
            Gets the current active cancellation token source.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.IAsyncExecutionContext.PrepareExecution(System.Threading.CancellationToken@)">
            <summary>
            Prepares an execution context.
            <see cref="P:SIM.Mvvm.IAsyncExecutionContext.IsBusy"/> will be set after this call.
            </summary>
            <param name="token">The cancellation token to cancel the asynchron command.</param>
        </member>
        <member name="M:SIM.Mvvm.IAsyncExecutionContext.FinalizeExecution">
            <summary>
            This call will finalize the context execution.
            <see cref="P:SIM.Mvvm.IAsyncExecutionContext.IsBusy"/> must be cleared after this call.
            </summary>
        </member>
        <member name="T:SIM.Mvvm.IViewModel">
            <summary>
            Declaration of an view model.
            </summary>
        </member>
        <member name="E:SIM.Mvvm.IViewModel.AdvancedPropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.IViewModel.InvokeOnPropertyChanged(System.String)">
            <summary>
            To invoke the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the property that was changed.</param>
        </member>
        <member name="M:SIM.Mvvm.IViewModel.SuppressNotifications(System.String,System.Object)">
            <summary>
            ViewModel will suppress <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> notifications on the property after calling this method.
            </summary>
            <param name="propertyName">Name of the property to suppress notifications.</param>
            <param name="currentValue">The current value of the property.</param>
        </member>
        <member name="M:SIM.Mvvm.IViewModel.RestoreNotifications(System.String,System.Object)">
            <summary>
            ViewModel will restore the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> notifications on the properties.
            </summary>
            <param name="propertyName">Name of the property to restore notifications.</param>
            <param name="currentValue">The current value, to invoke <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> if values changed.</param>
        </member>
        <member name="T:SIM.Mvvm.AsyncExecutionContext">
            <summary>
            Execution context for asynchron commands.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.AsyncExecutionContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SIM.Mvvm.AsyncExecutionContext"/> class.
            </summary>
        </member>
        <member name="P:SIM.Mvvm.AsyncExecutionContext.CancellationTokenSource">
            <inheritdoc/>
        </member>
        <member name="P:SIM.Mvvm.AsyncExecutionContext.Cancel">
            <inheritdoc/>
        </member>
        <member name="P:SIM.Mvvm.AsyncExecutionContext.IsBusy">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.AsyncExecutionContext.PrepareExecution(System.Threading.CancellationToken@)">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.AsyncExecutionContext.FinalizeExecution">
            <inheritdoc/>
        </member>
        <member name="T:SIM.Mvvm.ViewModel">
            <summary>
            The base view model.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.ViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SIM.Mvvm.ViewModel"/> class.
            </summary>
        </member>
        <member name="E:SIM.Mvvm.ViewModel.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="E:SIM.Mvvm.ViewModel.AdvancedPropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:SIM.Mvvm.ViewModel.SIM#Mvvm#IViewModel#InvokeOnPropertyChanged(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.ViewModel.SuppressNotifications(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.ViewModel.RestoreNotifications(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SIM.Mvvm.ViewModel.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            This call raises the <see cref="E:SIM.Mvvm.ViewModel.AdvancedPropertyChanged"/> and <see cref="E:SIM.Mvvm.ViewModel.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the property that get changed.</param>
            <param name="before">Old value of the property.</param>
            <param name="after">New value of the property.</param>
        </member>
        <member name="M:SIM.Mvvm.ViewModel.SetPropertyValue``1(``0@,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Compares the new and the old value.
            If values are different, the <see cref="M:SIM.Mvvm.ViewModel.OnPropertyChanged(System.String,System.Object,System.Object)"/> method will be called.
            The return value is always the new property.
            </summary>
            <typeparam name="T">Type of the Property.</typeparam>
            <param name="property">The reference to the current value.</param>
            <param name="newValue">The value from the setter.</param>
            <param name="comparer">Optional comparer to validate was changed.</param>
            <param name="propertyName">The name of the property that was changed.</param>
            <example>
            private int _property;
            public int Property
            {
                get => this._property;
                set => this.SetPropertyValue(ref _property, value);
            }
            ...
            </example>
        </member>
        <member name="M:SIM.Mvvm.ViewModel.SetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{``0}},``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Compares the new and the old value.
            If values are different, the <see cref="M:SIM.Mvvm.ViewModel.OnPropertyChanged(System.String,System.Object,System.Object)"/> method will be called.
            The return value is always the new property.
            </summary>
            <typeparam name="T">Type of the Property.</typeparam>
            <param name="expression">The expression that maps to the current value.</param>
            <param name="newValue">The value from the setter.</param>
            <param name="comparer">Optional comparer to validate was changed.</param>
            <param name="propertyName">The name of the property that was changed.</param>
            <example>
            private Model _propertyModel;
            public int Property
            {
                get => this._propertyModel.Property;
                set => this.SetPropertyValue(() => this._propertyModel.Property, value);
            }
            ...
            </example>
        </member>
        <member name="M:SIM.Mvvm.ViewModel.RegisterDependencies">
            <summary>
            Register all property dependencies marked with the <see cref="T:SIM.Mvvm.DependsOnAttribute"/>,
            to a <see cref="T:System.Windows.Input.ICommand"/> that implements <see cref="T:SIM.Mvvm.ICommandInvokeCanExecuteChangedEvent"/>.
            </summary>
        </member>
    </members>
</doc>
